/**
 */
package br.edu.ufpe.ines.decode.measurement.provider;

import br.edu.ufpe.ines.decode.measurement.util.MeasurementAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MeasurementItemProviderAdapterFactory extends MeasurementAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MeasurementItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.Measurements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementsItemProvider measurementsItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.Measurements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementsAdapter() {
		if (measurementsItemProvider == null) {
			measurementsItemProvider = new MeasurementsItemProvider(this);
		}

		return measurementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.Survey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SurveyItemProvider surveyItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.Survey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSurveyAdapter() {
		if (surveyItemProvider == null) {
			surveyItemProvider = new SurveyItemProvider(this);
		}

		return surveyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.TimeOnTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeOnTaskItemProvider timeOnTaskItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.TimeOnTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeOnTaskAdapter() {
		if (timeOnTaskItemProvider == null) {
			timeOnTaskItemProvider = new TimeOnTaskItemProvider(this);
		}

		return timeOnTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.ObservingProvidedArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservingProvidedArtifactItemProvider observingProvidedArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.ObservingProvidedArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservingProvidedArtifactAdapter() {
		if (observingProvidedArtifactItemProvider == null) {
			observingProvidedArtifactItemProvider = new ObservingProvidedArtifactItemProvider(this);
		}

		return observingProvidedArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.ObservingProducedArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservingProducedArtifactItemProvider observingProducedArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.ObservingProducedArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservingProducedArtifactAdapter() {
		if (observingProducedArtifactItemProvider == null) {
			observingProducedArtifactItemProvider = new ObservingProducedArtifactItemProvider(this);
		}

		return observingProducedArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.ObservingAllArtifacts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservingAllArtifactsItemProvider observingAllArtifactsItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.ObservingAllArtifacts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservingAllArtifactsAdapter() {
		if (observingAllArtifactsItemProvider == null) {
			observingAllArtifactsItemProvider = new ObservingAllArtifactsItemProvider(this);
		}

		return observingAllArtifactsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.Edition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditionItemProvider editionItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.Edition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditionAdapter() {
		if (editionItemProvider == null) {
			editionItemProvider = new EditionItemProvider(this);
		}

		return editionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.Execution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionItemProvider executionItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.Execution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionAdapter() {
		if (executionItemProvider == null) {
			executionItemProvider = new ExecutionItemProvider(this);
		}

		return executionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.Testing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestingItemProvider testingItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.Testing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestingAdapter() {
		if (testingItemProvider == null) {
			testingItemProvider = new TestingItemProvider(this);
		}

		return testingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.measurement.AnyAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyActionItemProvider anyActionItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.measurement.AnyAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyActionAdapter() {
		if (anyActionItemProvider == null) {
			anyActionItemProvider = new AnyActionItemProvider(this);
		}

		return anyActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (measurementsItemProvider != null) measurementsItemProvider.dispose();
		if (surveyItemProvider != null) surveyItemProvider.dispose();
		if (timeOnTaskItemProvider != null) timeOnTaskItemProvider.dispose();
		if (observingProvidedArtifactItemProvider != null) observingProvidedArtifactItemProvider.dispose();
		if (observingProducedArtifactItemProvider != null) observingProducedArtifactItemProvider.dispose();
		if (observingAllArtifactsItemProvider != null) observingAllArtifactsItemProvider.dispose();
		if (editionItemProvider != null) editionItemProvider.dispose();
		if (executionItemProvider != null) executionItemProvider.dispose();
		if (testingItemProvider != null) testingItemProvider.dispose();
		if (anyActionItemProvider != null) anyActionItemProvider.dispose();
	}

}
