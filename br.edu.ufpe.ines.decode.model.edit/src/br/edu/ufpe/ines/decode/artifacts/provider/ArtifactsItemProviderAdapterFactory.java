/**
 */
package br.edu.ufpe.ines.decode.artifacts.provider;

import br.edu.ufpe.ines.decode.artifacts.util.ArtifactsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArtifactsItemProviderAdapterFactory extends ArtifactsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArtifactsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.ProvidedArtefacts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedArtefactsItemProvider providedArtefactsItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.ProvidedArtefacts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedArtefactsAdapter() {
		if (providedArtefactsItemProvider == null) {
			providedArtefactsItemProvider = new ProvidedArtefactsItemProvider(this);
		}

		return providedArtefactsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.QuestionnaireInner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionnaireInnerItemProvider questionnaireInnerItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.QuestionnaireInner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionnaireInnerAdapter() {
		if (questionnaireInnerItemProvider == null) {
			questionnaireInnerItemProvider = new QuestionnaireInnerItemProvider(this);
		}

		return questionnaireInnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.PdfFIle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PdfFIleItemProvider pdfFIleItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.PdfFIle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPdfFIleAdapter() {
		if (pdfFIleItemProvider == null) {
			pdfFIleItemProvider = new PdfFIleItemProvider(this);
		}

		return pdfFIleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.JavaProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaProjectItemProvider javaProjectItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.JavaProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaProjectAdapter() {
		if (javaProjectItemProvider == null) {
			javaProjectItemProvider = new JavaProjectItemProvider(this);
		}

		return javaProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.JavaCompUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaCompUnitItemProvider javaCompUnitItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.JavaCompUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaCompUnitAdapter() {
		if (javaCompUnitItemProvider == null) {
			javaCompUnitItemProvider = new JavaCompUnitItemProvider(this);
		}

		return javaCompUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.OtherFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherFileItemProvider otherFileItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.OtherFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherFileAdapter() {
		if (otherFileItemProvider == null) {
			otherFileItemProvider = new OtherFileItemProvider(this);
		}

		return otherFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.edu.ufpe.ines.decode.artifacts.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link br.edu.ufpe.ines.decode.artifacts.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (providedArtefactsItemProvider != null) providedArtefactsItemProvider.dispose();
		if (questionnaireInnerItemProvider != null) questionnaireInnerItemProvider.dispose();
		if (pdfFIleItemProvider != null) pdfFIleItemProvider.dispose();
		if (javaProjectItemProvider != null) javaProjectItemProvider.dispose();
		if (javaCompUnitItemProvider != null) javaCompUnitItemProvider.dispose();
		if (otherFileItemProvider != null) otherFileItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
	}

}
